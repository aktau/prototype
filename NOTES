Debugging and profiling
=======================
How to use the apple OpenGL profiler, very handy:
https://developer.apple.com/library/mac/#technotes/tn2178/_index.html

Allocators
==========

Zmalloc features native support for jemalloc and tcmalloc, but even easier would be to try the LD_PRELOAD
trick later and see if it helps.

Alternatively or additionally, we could consider an arena allocator (i.e.: libarena): http://25thandclement.com/~william/projects/libarena.html

Links to be reviewed for implementation
=======================================

Techniques from "crazy fractal worlds":
http://www.youtube.com/watch?v=8-5Z_031x00
http://www.iquilezles.org/www/material/function2009/function2009.pdf

Distance functions - iñigo quilez:
http://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm

Awesome articles - iñigo quilez:
http://iquilezles.org/www/

The care and feeding of an OpenGL 3.2 core context on OSX:
http://hci.rwth-aachen.de/opengl_3_2_tutorial

Fully self-contained OpenGL 3.2 + GLSL 1.5 example, with matrix functions in C:
http://www.lighthouse3d.com/cg-topics/code-samples/opengl-3-3-glsl-1-5-sample/

Indexed drawing:
http://www.arcsynthesis.org/gltut/Positioning/Tutorial%2005.html

Kazmatch, a C math library for games:
https://github.com/Kazade/kazmath/tree/master/kazmath

Apple, best practices for working with vertex data:
http://developer.apple.com/library/ios/#documentation/3ddrawing/conceptual/opengles_programmingguide/TechniquesforWorkingwithVertexData/TechniquesforWorkingwithVertexData.html

[INSTANCING] Drawing instanced geometry with the help of glVertexAttribDivisor:
http://programming4.us/multimedia/8306.aspx

[INSTANCING] Alternative way to instance, pass a buffer and index it with gl_InstanceId:
http://gamedev.stackexchange.com/questions/60203/most-efficient-way-to-draw-large-number-of-the-same-objects-but-with-different

[INSTANCING] Wolfire Lugaru: pseudo-instancing and discussion:
http://blog.wolfire.com/2009/11/Fast-object-instancing

[INSTANCING] iki.fi, pass a (transformation) matrix (mat4) with 4 glVertexAttribPointer()-calls and glVertexAttribDivisor, very cool:
http://sol.gfxile.net/instancing.html

[FILESYSTEM] efsw, file system watching (C++ but used by C projects as well):
https://bitbucket.org/SpartanJ/efsw

[ENGINES] DarkHammer, C, Lua:
https://bitbucket.org/sepul/dark-hammer

[ENGINES] Urho3D, C++, Lua, Task-based multithreading:
https://code.google.com/p/urho3d/

[SHADER EFFECTS] Glow and Bloom:
http://devmaster.net/posts/3100/shader-effects-glow-and-bloom

[SHADER EFFECTS]: Depth of field (DOF):
http://devmaster.net/posts/3021/shader-effects-depth-of-field

[SHADER EFFECTS]: The egg:
http://pixelshaders.com/editor/#5d000001002e0700000000000000381c88cdaf8125d4569ed1e6e6c09c2fe72b7d489ad9d27ce026c85da1432f9b0a56cbf82b16d7f997abaffdd294666ceebb4d1566bfeab205986af7591b004d02668635f6bfb645f3d18f1536b6d917ec60480c76e3602b9cc9ca742cd07c3c448b52255ce638c24ebbeadda97525371d914a2d66906a6414d62b4767a6a8a7752dcc2a488d629e87a4c9cdd7f6f3eefb93c5779c8f1d893756d5e1049f04fa0fddabb44cffbae6ee0452d206faa0878e1a3b62f404f85321be1d8413f2b99b58afec5c70d891897aa69526a12659130d8ea95742e6bf4c88b83e7aae47c94134a1c62cd63d672904adc0bdfcbe58c223348742f69a106a723127d77c7cc9c0dc4b9e32c703840301aeb7ef177e071501faa8a290824345db2b1f07e8a58fe9700503683d64aa79c11353f322628da8abb88905b71eab3a890411fc60c8024e01395fbc2de7561c60666a089df33f5143ba88ba740396b2b917962d8b20270250c757b391103c86aa946689d54561ee8f61934ca2382c712a8f3d243926468108d8a2f1c1c6a2ea9db98efa0bec579c0a47717e3735c74c4320b6a6803aa1c0a44fcbc2dd02a68c6ec1be68fcfac70a12c4660d8b7a0bd158060960b5ff0a16dfe04703d80b0465758896e09613eef025677d11d3bb5abeec62cfabea1e65138c51a13dae171ea7498d853f17e9f5c051b6666ce7966ff0bf63ddd94a904c9df419dd8ef43839923a9e364cc5d002ca2f7553eec21aadafa890bbe66a69fd05833106af40baa5433407f5b0dce9c1f8d56ae264f8136faf10c1a54f4dd49d6d850fb79f27fb35f71d9d2f1263decb08ddbad3f3ade9a36eab876bae76f844e3a1258d8b7276041561515378427c58ce8be0df826bbdb84dddbdb69420d2c0e3b577af9982f46b49de2a426af9de743cb1a55d2e8a52dee6b60eb84ff0594f684a3115b9bf0c4bbcd6f1e79c1b0360eac704a85435c39dceec3fc2a166db96d0d6dd0c86413ae97b2e3a46bfc024ba1c6b2c2d2c2a90422a245a38d33581cfc6e4a181b18fe25a679f6dc64e5171925908515a45d0b5f040081e0e047533bffff9a5184f

[TESSELATION] Tesselation does work on OSX:
http://jonmacey.blogspot.de/2013/05/glsl-tessellation-shaders-under-mac-osx.html

[GRAPHICS] Screen space ambient occlusion (SSAO), a step for deferred rendering:
http://devmaster.net/posts/3095/shader-effects-screen-space-ambient-occlusion

[GRPAHICS] Article full of links for deferred rendering:
http://www.gamerendering.com/2008/11/01/deferred-lightning/
Killzone 2 presentation on deferred rendering - http://www.guerrilla-games.com/publications/dr_kz2_rsx_dev07.pdf
Deferred rendering demystified, gamedev.net - http://www.gamedev.net/page/resources/_/technical/graphics-programming-and-theory/deferred-rendering-demystified-r2746
Intel research, deferred rendering - http://visual-computing.intel-research.net/art/publications/deferred_rendering/

[GRAPHICS] Best tutorial on bump mapping I've seen yet:
http://ogldev.atspace.co.uk/www/tutorial26/tutorial26.html

[LUA] How to export symbols from an executable:
http://stackoverflow.com/questions/3954137/mac-how-to-export-symbols-from-an-executable

[LUA] How to include an extra module at compile time (such as YAML):
http://stackoverflow.com/questions/11485911/lua-5-2-c-api-and-require

[LUA] use FFI module:
http://stackoverflow.com/questions/5919743/how-to-use-luajits-ffi-module-when-embedding?rq=1

[LUA] Simple C to Lua example, setup environment with variables and call lua script, read result:
http://lua-users.org/wiki/SimpleLuaApiExample

[LUA] The lua faq:
http://www.luafaq.org/

[LUA] Support both 5.1 and 5.2 with a tiny bit of IFDEF:
http://lua.2524044.n2.nabble.com/Standard-Lua-modules-in-5-2-1-td7581168.html

[TERRAIN] Terrain generation tutorial:
http://www.shamusyoung.com/twentysidedtale/?p=147

[COMPILERS] Things DEFINE'd by specific compilers:
http://sourceforge.net/p/predef/wiki/Compilers/